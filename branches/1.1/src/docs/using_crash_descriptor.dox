/*!

\page using_crash_descriptor Using Crash Descriptor XML (crashrpt.xml)

The crash descriptor is an XML file that contains the basic information about the crash.

\note The structure of XML file has changed since the version 1.0 of CrashRpt. The old structure
provided mostly unusable information taken from crash minidump (exception address, 
module list and so on). 

A typical crash descriptor is presented below.

\code

<?xml version="1.0" encoding="utf-8" ?> 
<CrashRpt version="1103">
    <CrashGUID>5822d7e1-61ba-4fb0-bedf-672369fa9d36</CrashGUID>
    <AppName>CrashRpt Tests</AppName>
    <AppVersion>1.0.0</AppVersion>
    <ImageName>d:\Projects\CrashRpt\src\bin\CrashRptTest.exe</ImageName>
    <OperatingSystem>Windows 7 Ultimate Build 7100</OperatingSystem>
    <SystemTimeUTC>2009-06-28T04:47:32Z</SystemTimeUTC>
    <ExceptionType>11</ExceptionType>
    <FileList>
        <FileItem name="crashdump.dmp" description="Crash Dump" />
        <FileItem name="crashrpt.xml" description="Crash Log" />
        <FileItem name="dummy.ini" description="Dummy INI File" />
        <FileItem name="dummy.log" description="Dummy Log File" />
    </FileList>
    <UserEmail></UserEmail>
    <ProblemDescription></ProblemDescription>
</CrashRpt>

\endcode

The root element is <CrashRpt>. It has attribute named 'version' which represents
the version of CrashRpt library that generated the error report. The value of '1103'
means version 1.1.3.

The element  <CrashGUID> is a unique ID of the error report. It can be used, for example,
as a primary key if you plan to store crash reports in a database.

The element  <AppName> is the name of your application that was passed to \b crInstall() 
as \b pszAppName member of \b CR_INSTALL_INFO structure.

The element  <AppVersion> is the version of your application that was passed to \b crInstall() 
as \b pszAppVersion member of \b CR_INSTALL_INFO structure. You are typically interested
in analysing error reports from the latest version of your software and ignore reports from 
older versions.

The element  <ImageName> is path to the executable image of your software.

<OperatingSystem> is the friendly name of end user's operating system, including name, build number
and service pack. It is useful information because many errors are OS-specific.

<SystemTimeUTC> is the time in UTC format when crash had occured. This value can be used to
order crash reports by creation time.

<UserEmail> is the E-mail address of error report sender. If specified, it can be used
to contact user and request additional info about error.

<ProblemDescription> is the user-provided problem description. 

<FileList> contains the list of files that are contained in the error report. 

<ExceptionType> is an integer that means the type of error:

- 0 Win32 structured exception.
- 1 C++ terminate() call.
- 2 C++ unexpected() call.
- 3 C++ pure virtual function call.
- 4 C++ new operator fault.
- 5 Buffer overrun error.
- 6 Invalid parameter exception.
- 7 C++ SIGABRT signal (abort).
- 8 C++ SIGFPE signal (flotating point exception).
- 9 C++ SIGILL signal (illegal instruction).
- 10 C++ SIGINT signal.
- 11 C++ SIGSEGV signal (invalid storage access)
- 12 C++ SIGTERM signal (termination request).

The exception type can be used to divide error reports into some categories.

There are additional elements that appear sometimes, depending on ExceptionType.

\b <ExceptionCode> is the structured exception code. It presents when ExceptionType is 0.

\b <FPESubcode> is the floating point exception subcode. It presents when ExceptionType is 8.

<InvParamFunction>, <InvParamExpression>, <InvParamFile> and <InvParamLine> are present when 
ExceptionType is 6. These elements are typically empty. They may be non-empty if debug version
of CRT is used in your application.


*/