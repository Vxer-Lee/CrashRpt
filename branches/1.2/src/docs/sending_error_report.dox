/*!

\page sending_error_reports Sending Error Reports

When crash occurs, CrashRpt runs the \b CrashSender.exe process that collects crash information (desktop screenshot, minidump, application-defined files). 
The parent process is then terminated, except in the case when you generate error report manually.

By default, \b CrashSender.exe saves error report files to <i>%%LOCAL_APP_DATA%\\CrashRpt\\UnsentErrorReports\\%%AppName%%_%%AppVersion%</i> folder. 
Optionally, you can specify another location where to store files using CR_INSTALL_INFO::pszErrorReportSaveDir structure member.

\b CrashSender.exe moves crash report files to the Recycle Bin after the report is sent to the recipient successfuly. 
If error report sending procedure fails, \b CrashSender.exe doesn't delete the report files.          

\b CrashSender.exe displays GUI as described in \ref error_report and when user confirms error report submission, 
\b CrashSender.exe compresses the report files and attempts to send the error report to the recipient over HTTP or over E-mail 
using the following ways in turn:
 - via HTTP request to a server-side script
 - via direct connection to an SMTP server
 - via Simple MAPI programming interface (user's default E-mail client application)

You can specify the order of trials by using CR_INSTALL_INFO::uPriorities structure member.

\section error_report_size_limitations Error Report Size Limitations

<b>Since v.1.2.2</b>, CrashRpt provides better support of large error reports being sent using HTTP connection.
You can send error reports having arbitrary size, however check your web-server settings to ensure it won't
reject reports larger than some limit. For example, if you use PHP, check the <i>upload_max_filesize</i>
configuration parameter (the default in 2 megabytes), <i>post_max_size</i> parameter and possibly others (see PHP documentation 
for details).

In case you plan to deliver error reports over E-mail, than error reports should be as small as possible. 
This is because of limitations of email attachment size. If the error report is larger than the 
limit (which may be different for different mail server), it is possible that the error report 
will be rejected. 

\section httpsend Sending Crash Report Using HTTP Connection

Many software products have web sites on the Internet. Such web servers typically have some 
scripting engine enabled, for example, PHP, ASP and so on. CrashRpt can establish HTTP connection
to a server-side script and send the error report as a script parameter.

Older versions of CrashRpt used "application/x-www-form-urlencoded" form encoding type in conjunction 
with Base-64 encoding for file attachment. 
The legacy way is enabled by default for backwards compatibility, however it is not recommended to use.

The equivalent HTTP form is presented below:

\code 
<http>
<form action="http://someserver.net/crashrpt.php" method="POST" enctype="application/x-www-form-urlencoded">
 MD5:<input type="text" name="md5">
 Base64-encoded ZIP file data:<input type="text" name="crashrpt">
 <input type="submit" name="Submit">
</form>
</http>
\endcode


<b>Since v.1.2.2</b>, CrashRpt supports HTTP file uploads as described in 
<a href="http://www.ietf.org/rfc/rfc1867.txt">RFC-1867.</a> 
This mechanism allows to upload large files by using binary content transfer encoding. 
The "multipart/form-data" form encoding is utilized for this purpose. 

The equivalent HTTP form is presented below:

\code 
<http>
<form action="http://someserver.net/crashrpt.php" method="POST" enctype="multipart/form-data">
 Application name:<input type="text" name="appname">
 Application version:<input type="text" name="appversion">
 Email from:<input type="text" name="emailfrom">
 Email subject:<input type="text" name="emailsubject">
 Crash GUID:<input type="text" name="crashguid">
 MD5:<input type="text" name="md5">
 Attach ZIP file:<input type="file" name="crashrpt">
 <input type="submit" name="Submit">
</form>
</http>
\endcode

This transfer type is disabled by default to ensure backwards compatibility. To opt this in, 
specify \ref CR_INST_HTTP_BINARY_ENCODING flag in CR_INSTALL_INFO::dwFlags 
structure member.

\subsection script_params Script Parameters

Below is the summary of parameters the server-side script may receive. The parameters actually received
may depend on what version of CrashRpt sent the report.

The server-side script may receive the following POST parameters. In PHP, these parameters are part of 
<b>$_POST</b> global array.

<table>

<tr>
<td> <b>Parameter Name</b>
<td> <b>Example value</b>
<td> <b>Remarks</b>

<tr>
<td> md5
<td> "af89e902b42cd301092bb34530984e59"
<td> This parameter contains the MD5 hash of error report data. This can be used to check error report integrity.

<tr>
<td> crashrpt
<td> This will be a Base-64 encoded character sequence.
<td> This parameter contains error report data encoded with Base-64 encoding. This legacy parameter is have to be used 
     if you need to receive reports being sent by an older (pre-v.1.2.2) version of CrashRpt. 

     The crash report ZIP file data are converted to base64 encoding to replace all restricted characters with a set
     of 64 predefined characters. The server-side script should base64-decode the ZIP file data.

     Since v.1.2.2, error reports are recommended to send using binary encoding (see CR_INSTALL_INFO::dwFlags member
     for more information). 

<tr>
<td> appname
<td> "MyApp"
<td> Application name (as passed to \b CR_INSTALL_INFO::pszAppName structure member).

     <b>This parameter is available in error report sent by CrashRpt v.1.2.2 or later.</b>
<tr>
<td> appversion
<td> "1.0.0"
<td> Application version (as passed to \b CR_INSTALL_INFO::pszAppVersion structure member).

     <b>This parameter is available in error report sent by CrashRpt v.1.2.2 or later.</b>
<tr>
<td> crashguid
<td> "37b4d6da-1211-4e62-adc6-174acb53ddf5"
<td> Crash GUID (globally unique identifier). 

     <b>This parameter is available in error report sent by CrashRpt v.1.2.2 or later.</b>
<tr>
<td> emailsubject
<td> "MyApp 1.0.0 Error Report"
<td> E-mail subject (as passed to \b CR_INSTALL_INFO::pszEmailSubject structure member).

     <b>This parameter is available in error report sent by CrashRpt v.1.2.2 or later.</b>
<tr>
<td> emailfrom
<td> "user@example.com"
<td> E-mail of the user who sent this report. 

     <b>This parameter is available in error report sent by CrashRpt v.1.2.2 or later.</b>
<tr>
<td> description
<td> "I just started the app and then it crashed. Help!"
<td> User-provided problem description.

     <b>This parameter is available in error report sent by CrashRpt v.1.2.2 or later.</b>
</table>

The server side script may receive the following file attachments. In PHP, these parameters are part
of <b>$_FILES</b> global array.

<table>

<tr>
<td> <b>Attachment Name</b>
<td> <b>Remarks</b>

<tr>
<td> crashrpt
<td> This file attachment contains the error report file data.

     <b>This parameter is available in error report sent by CrashRpt v.1.2.2 or later.</b>
</table>

\subsection script_return Return Value

The script should return status of request completion as server responce content. In HTTP/1.0 and since, 
the first line of the HTTP response is called the status line and includes a numeric status code (such as "404") 
and a textual reason phrase (such as "Not Found").

If the script succeeds in saving the error report, it should return the "200 Success" as server responce content.
If the script encounters an error, it should return a 4xx error code, for example "450 Invalid parameter". 
Note that some error codes are reserved by HTTP specification. If the script uses custom error codes, they shouldn't
intersect with standard predefined HTTP codes. 

\note

When creating your own script, be careful with the script's return code. If your script succeeds in
saving error report it should return '200 Success'. If crash sending process 
encounters another error code, it attempts sending the error report using another way. In such situation
you may receive the same error report several times through different transport.

\subsection script_example Sample PHP Script

Below is an example server-side PHP script that can receive a crash report and write it to a file.
The script can receive error reports from any version of CrashRpt.

\code
<?php

$fileroot = "/home/username/crash_reports/";

// Checks if field is correct
function checkOK($fieldname)
{
  if ( !isset($_POST[$fieldname]) || 
       eregi("\r",$_POST[$fieldname]) || 
       eregi("\n", $_POST[$fieldname]) )
  {
    echo "450 Invalid or missing parameter: '$fieldname'.";
    exit(1);
  }
}

/*** Begin ***/

date_default_timezone_set('UTC');

checkOK('md5');
$md5 = $_POST['md5'];

if(array_key_exists('crashrpt', $_FILES))
{
  $basename = basename($_FILES['crashrpt']['name']);
  if(empty($basename))
  {
    echo "450 Missing filename";
    exit(1);
  }
  $filename = $fileroot.$basename;

  if(!move_uploaded_file($_FILES['crashrpt']['tmp_name'], $filename))
  {
    echo "452 Couldn't save data to local storage 1"; 
    exit(1);
  }
}
else
{
  // Assume legacy way is used
  
  checkOK('crashrpt');

  // Decode file data
  $filedata = base64_decode( $_POST['crashrpt'] );

  if(array_key_exists('crashguid', $_POST))
  {
    $filename = $fileroot.$_POST['crashguid'].".zip";
  }
  else
  {
    // Generate ZIP file name
    $datetime = date(DATE_RFC822);
    $filename = $fileroot.md5($filedata.$datetime).".zip";
  }

  // Write decoded data to file
  $file = fopen($filename, "w");
  if($file==FALSE)
  {
    echo "452 Couldn't save data to local storage"; 
    exit(1);
  }
	 
  fwrite($file, $filedata);
  fclose($file);
}

// Check that decoded data have valid MD5 hash
$my_md5_hash = strtolower(md5_file($filename));
$their_md5_hash = strtolower($_POST['md5']);
if($my_md5_hash!=$their_md5_hash)
{
  echo "451 MD5 hash is invalid (yours is ".$their_md5_hash.", but mine is ".$my_md5_hash.")";
  exit(1);
}

// OK.
echo "200 Success";
exit(0);

?>

\endcode

\section smtpsend Sending Crash Report Using SMTP Connection

CrashRpt has a simple built-in SMPT client. It can try to send an error report to recipient using SMTP
connection without any user interaction. The error report is sent as an E-mail multi-part message with 
attachments.

If user provides his/her email address, CrashRpt tries to use the address's MX domain record to determine local SMTP
server name and relay the email message to that server.

If user doesn't provide his/her email address, CrashRpt tries to send the email directly to recipient using the MX 
record of recipent's domain. Many SMTP servers may block direct access to them to avoid spam (for example Google does so).

This way may fail if firewall blocks outgoing connections on port 25. 

\section smapisend Sending Crash Report Using Simple MAPI

CrashRpt can use the default E-mail client, for example, Mozilla Thunderbird, to send an error report as email. 
The error report is sent as an E-mail multi-part message with attachments.
This requires some user interaction.

This way has the lowest priority by default.


*/