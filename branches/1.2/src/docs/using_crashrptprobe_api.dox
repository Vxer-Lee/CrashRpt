/*!

\page using_crashrptprobe_api Using CrashRptProbe API

\b crprober.exe provides basic crash report processing services. Hovewer, some users may need
to have more complex error report processing functionality. For example, they may want
to store error reports in a database, process some custom information stored in error reports,
such as log files, and provide some kind of bug tracking services. Such users may use application 
programming interface provided by the \b CrashrptProbe.dll dynamic library. This API is used internally 
by the \b crprober.exe tool.

Internally CrashRptProbe uses the functions provided by \b dbghelp.dll (Microsoft Debug Help Library) 
for loading the minidump file contained in the report. The functions used are \b MinidumpReadDumpStream()
and \b StackWalk64().

The CrashRptProbe provides several functions and one enumeration (see \ref CrashRptProbeAPI
and \ref CrashRptProbeEnums). All CrashRptProbe functions have \c crp prefix in function name, and 
the enumeration has \c CRP prefix.

All CrashRptProbe functions using character set dependent arguments have two versions of function name 
(multibyte versions are A-suffixed and wide character versions are W-suffixed). For example, crpGetProperty()
function has two versions of function name: crpGetPropertyA() and crpGetPropertyW(). Typically you use a
character set independent mapping of function name in your program, for example use crpGetProperty() that 
expands into crpGetPropertyW() if you use wide character set or into crpGetPropertyA() if you use multibyte 
character set.

\section crprobe_include_and_lib_files Include and Lib Files

First of all, configure your project directories as described in \ref link section. This will make
sure your compiler and linker will find the include and lib files.

Include the \ref CrashRptProbe.h header file in the beginning of your code in order to use
CrashRptProbe API in your report processing program.

\code
//Include CrashRptProbe header in the beginning of your code
#include <CrashRptProbe.h>
\endcode

You also need to add CrashRptProbe.lib file to the list of input libraries for your project.
In the Solution Explorer window, right-click your project and choose Properties item in the
context menu. Then open Configuration Properties->Linker->Input->Additional Dependencies 
and then add \b CrashRptProbe.lib to the list of libraries. 

\section opening_and_closing_error_reports Opening and Closing Error Reports

Error report files are normal ZIP archives containing several files as described in \ref error_report.
To open an error report file, you use the crpOpenErrorReport() function. The function returns the
handle to the opened report as \b CrpHandle type, which is an integer number identifying the opened report. 
You pass the handle to other functions.

When you have retreived all data you needed, close the report. To close previously 
opened error report, you use crpCloseErrorReport() function.

\section retrieving_report_properties Retreiving Error Report Properties

You can think of the error report as of set of properties. Each property is a text string having unique ID.
The list of available properties is defined by the \ref CRP_ErrorReportProperty enumeration.

To retrieve a property from the report, you use the crpGetProperty() function.

Some data, such as list of files contained in the report, the stack trace or the list of loaded modules 
are actually tables consisting of multiple rows and columns and can't be represented as a single string. 
Hovewer, you still can retrieve a cell of such table by its index using crpGetProperty().

For code examples, see \ref crashrptprobe_api_examples.                                                     

Below the complete list of available properties is presented:

<table>

<tr>
<td> <b>Property Name</b>
<td> <b>Example Value</b>
<td> <b>Description</b>

<tr>
<td colspan="3" align="center"> Properties being retrieved from crash descriptor XML 

<tr>
<td> \ref CRP_PROP_CRASHRPT_VERSION
<td> "1103"
<td> Use this property to get the version of CrashRpt library that generated the error report. 
     For example, "1000" means the report was generated using old v1.0, and "1103" means the
     report was generated using v1.1.3.

<tr>
<td> \ref CRP_PROP_CRASH_GUID
<td> "0b3b0c1b-3450-4c39-9459-42221ae66460"
<td> This property represents the globally unique identifier (GUID) assigned to the error report.
     <br><b>CrashRpt v1.1b and later</b>

<tr>
<td> \ref CRP_PROP_APP_NAME
<td> "My Application"
<td> Represents the name of the application name this report was generated for.

<tr>
<td> \ref CRP_PROP_APP_VERSION
<td> "6.1.0.200"
<td> Application version.


<tr>
<td> \ref CRP_PROP_IMAGE_NAME
<td> "C:\Program Files\My Application\MyApp.exe"
<td> Path to the executable file.

<tr>
<td> \ref CRP_PROP_OPERATING_SYSTEM
<td> "Windows XP Build 2600 Service Pack 3"
<td> Opration system name, including build number and service pack. This value is taken from
     end user's registry.
     <br><b>CrashRpt v1.1b and later</b>

<tr>
<td> \ref CRP_PROP_SYSTEM_TIME_UTC
<td> ""
<td> Time (UTC) when the crash had occured.

<tr>
<td> \ref CRP_PROP_EXCEPTION_TYPE
<td> ""
<td> Code of exception handler that cought the exception.

<tr>
<td> \ref CRP_PROP_EXCEPTION_CODE
<td> ""
<td> Exception code; for the structured exceptions only, hexadecimal number.

<tr>
<td> \ref CRP_PROP_INVPARAM_FUNCTION
<td> ""
<td> Function name; for invalid parameter errors only.

<tr>
<td> \ref CRP_PROP_INVPARAM_EXPRESSION
<td> ""
<td> Expression; for invalid parameter errors only.

<tr>
<td> \ref CRP_PROP_INVPARAM_FILE
<td> ""
<td> Source file name; for invalid parameter errors only.

<tr>
<td> \ref CRP_PROP_INVPARAM_LINE
<td> ""
<td> Source line; for invalid parameter errors only.

<tr>
<td> \ref CRP_PROP_FPE_SUBCODE
<td> ""
<td> Subcode of floating point exception; for FPE exceptions only.

<tr>
<td> \ref CRP_PROP_USER_EMAIL
<td> ""
<td> Email of the user who sent this report.

<tr>
<td> \ref CRP_PROP_PROBLEM_DESCRIPTION
<td> ""
<td> User-provided problem description.

<tr>
<td> \ref CRP_PROP_FILE_COUNT
<td> ""
<td> Number of files contained in th error report.

<tr>
<td> \ref CRP_PROP_FILE_ITEM_NAME
<td> ""
<td> File list: Name of the file contained in the report.

<tr>
<td> \ref CRP_PROP_FILE_ITEM_DESCRIPTION
<td> ""
<td> File list: Description of the file contained in the report.


<tr>
<td colspan = "3" align="center">Properties being retrieved from minidump file

<tr>
<td> \ref CRP_PROP_STACK_FRAME_COUNT
<td> ""
<td> Count of frames in the stack trace.

<tr>
<td> \ref CRP_PROP_STACK_MODULE_NAME
<td> ""
<td> Stack trace: module name.

<tr>
<td> \ref CRP_PROP_STACK_SYMBOL_NAME
<td> ""
<td> Stack trace: symbol name.

<tr>
<td> \ref CRP_PROP_STACK_OFFSET_IN_SYMBOL
<td> ""
<td> Stack trace: offset in symbol, hexadecimal.

<tr>
<td> \ref CRP_PROP_STACK_SOURCE_FILE
<td> ""
<td> Stack trace: source file name.

<tr>
<td> \ref CRP_PROP_STACK_SOURCE_LINE
<td> ""
<td> Stack trace: source file line number.

<tr>
<td> \ref CRP_PROP_CPU_ARCHITECTURE
<td> ""
<td> Processor architecture.

<tr>
<td> \ref CRP_PROP_CPU_COUNT
<td> ""
<td> Number of processors.

<tr> 
<td> \ref CRP_PROP_SYSTEM_TYPE
<td> ""
<td> Type of system (server or workstation).

<tr>
<td> \ref CRP_PROP_OS_VER_MAJOR
<td> ""
<td> OS major version.

<tr>
<td> \ref CRP_PROP_OS_VER_MINOR
<td> ""
<td> OS minor version.

<tr>
<td> \ref CRP_PROP_OS_VER_BUILD
<td> ""
<td> OS build number.

<tr>
<td> \ref CRP_PROP_OS_VER_CSD
<td> ""
<td> The latest service pack installed.

<tr>
<td> \ref CRP_PROP_EXCPTRS_EXCEPTION_CODE
<td> ""
<td> Code of the structured exception.

<tr>
<td> \ref CRP_PROP_EXCPTRS_EXCEPTION_ADDRESS
<td> ""
<td> Exception address.

<tr>
<td> \ref CRP_PROP_MODULE_COUNT
<td> ""
<td> Count of modules.

<tr>
<td> \ref CRP_PROP_MODULE_NAME
<td> ""
<td> Module name.

<tr>
<td> \ref CRP_PROP_MODULE_BASE_ADDRESS
<td> ""
<td> Module base load address.

<tr>
<td> \ref CRP_PROP_MODULE_SIZE
<td> ""
<td> Module size.

<tr>
<td> \ref CRP_PROP_MODULE_SYMBOLS_LOADED
<td> "1" if symbols were loaded, or "0" if not.
<td> Were symbols loaded for the module or not?

</table>

\section retrieving_report_files Retrieving Files Contained in Report

An error report is a ZIP archive containing several files. The files are: crash minidump file (.dmp),
crash report descriptor file (.xml) and optional application-defined files, such as application log file.

To enumerate files contained in report, you use \ref CRP_PROP_FILE_COUNT, \ref CRP_PROP_FILE_ITEM_NAME and
\ref CRP_PROP_FILE_ITEM_DESCRIPTION properties.

To extract a file from the ZIP archive by file name, you use crpExtractFile() function.

\section handling_crprobe_errors Handling Errors

Typically a CrashRptProbe API function returns zero value if succeeded and non-zero if failed. To get
text error message of the last called function, use crpGetLastErrorMsg().

\section crashrptprobe_api_reference CrashRptProbe API Reference

- \ref CrashRptProbeAPI
- \ref CrashRptProbeEnums

*/