/*!

\page using_crashrptprobe_api Using CrashRptProbe API

This page describes the application programming interface (API) for processing error reports 
generated by CrashRpt. This API is used internally by the \b crprober.exe tool presented in 
the previous section. 

The error report processing functionality is encapsulated inside of CrashRptProbe.dll. 
Internally CrashRptProbe uses the functions provided by \b dbghelp.dll (Microsoft Debug Help Library) 
for loading the minidump file contained in the report. The functions used are \b MinidumpReadDumpStream()
and \b StackWalk64().

The CrashRptProbe provides several functions you can use in your own error report processing tool 
(see \ref CrashRptProbeAPI). All CrashRptProbe functions have \c crp prefix in function name, 
constants have \c CRP prefix and types have \c Crp prefix.

All CrashRptProbe functions using character set dependent arguments have two versions of function name 
(multibyte versions are A-suffixed and wide character versions are W-suffixed). For example, crpGetProperty()
function has two versions of function name: crpGetPropertyA() and crpGetPropertyW(). Typically you use a
character set independent mapping of function name in your program, for example use crpGetProperty() that 
expands into crpGetPropertyW() if you use wide character set or into crpGetPropertyA() if you use multibyte 
character set.

\section crprobe_include_and_lib_files Include and Lib Files

First of all, configure your project directories as described in \ref link section. This will make
sure your compiler and linker will find the include and lib files.

Include the \ref CrashRptProbe.h header file in the beginning of your code in order to use
CrashRptProbe API in your report processing program.

\code
//Include CrashRptProbe header in the beginning of your code
#include <CrashRptProbe.h>
\endcode

You also need to add CrashRptProbe.lib file to the list of input libraries for your project.
In the Solution Explorer window, right-click your project and choose Properties item in the
context menu. Then open Configuration Properties->Linker->Input->Additional Dependencies 
and then add \b CrashRptProbe.lib to the list of libraries. 

\section opening_and_closing_error_reports Opening and Closing Error Reports

Error report files are normal ZIP archives containing several files as described in \ref error_report.
To open an error report file, you use the crpOpenErrorReport() function. The function returns the
handle to the opened report as \ref CrpHandle type, which is an integer number identifying the opened report. 
You pass the handle to other CrashRptProbe functions.

When you have retreived all the data you need, close the report. To close previously 
opened error report, you use crpCloseErrorReport() function.

\section retrieving_report_properties Retreiving Error Report Properties

You can think of the error report as a set of properties. All properties are organized into tables
consisting of rows and columns. 

Each property is a text string. But sometimes you might need to convert text properties to some other
types for further processing. 

To retrieve a property from the report, you use the crpGetProperty() function. 
You pass table ID, column ID and row ID identifying the
property to this function, and receive the value to the text buffer.

The list of table IDs you can use is presented below. 

<table>

<tr>
<td> <b>Table ID</b>
<td> <b>Description</b>
</tr>

<tr>
<td> \ref CRP_TBL_XMLDESC_MISC
<td> This table contains miscellaneous information retrieved from XML crash descriptor file.    
</tr>

<tr>
<td> \ref CRP_TBL_XMLDESC_FILE_ITEMS
<td> This table contains the list of files contained in the error report.
</tr>

<tr>
<td> \ref CRP_TBL_MDMP_MISC
<td> This table contains miscellaneous information retrieved from crash minidump file.
</tr>

<tr>
<td> \ref CRP_TBL_MDMP_MODULES
<td> This table contains the list of loaded modules retrieved from crash minidump file.
</tr>

<tr>
<td> \ref CRP_TBL_MDMP_THREADS
<td> This table contains the list of threads retrieved from crash minidump file.
</tr>

</table>

The list of table IDs is not fixed. There may be additional tables in the report, and you 
can determine their IDs at run time only. For example, each exectuion thread
has the stack trace. You can retrieve table IDs for stack trace of each thread from 
\ref CRP_TBL_MDMP_THREADS table.

Each table may have several rows. The \ref CRP_TBL_XMLDESC_MISC and \ref CRP_TBL_MDMP_MISC
tables always have single row. Other ones may have more than one row. You can determine the 
number of rows in the table by passing special constant \ref CRP_META_ROW_COUNT to the 
crpGetProperty() function, as shown in the example below:

\code
// The following helper function can retrieve the number of rows in the table.
// The return value is non-negative on success.
int get_table_row_count(CrpHandle hReport, LPCTSTR lpszTableId)
{
  return crpGetProperty(hReport, lpszTableId, CRP_META_ROW_COUNT, 0, NULL, 0, NULL);
}
\endcode

Each table has several columns. The number of columns is not fixed, it depends on what version
of CrashRpt generated the report. 

To retrieve a property from a table, you specify the table ID, column ID and row index 
(see the following example):

\code

// It is assumed the handle to the opened error report is stored in hReport variable.
const int BUFF_SIZE = 1024;
TCHAR szBuffer[BUFF_SIZE];  

// Get the count of processors on user's machine.
int nResult = crpGetProperty(hReport, CRP_TBL_MDMP_MISC, CRP_COL_CPU_COUNT, 0, szBuffer, BUFF_SIZE, NULL);

\endcode

Below the list of available column IDs for each table is presented:

<b>Column IDs of the \ref CRP_TBL_XMLDESC_MISC table.</b>

<table>

<tr>
<td> <b>Column ID</b>
<td> <b>Description</b>

<tr>
<td> \ref CRP_COL_CRASHRPT_VERSION
<td> 

Example values: "1000" (v1.0), "1100" (v1.1b), "1101" (v1.1.1), 
"1102" (v1.1.2), "1103" (v1.1.3), "1200" (v1.2.0).

Use this property to get the version of CrashRpt library that generated the error report. 
For example, "1000" means the report was generated using old v1.0, and "1103" means the
report was generated using v1.1.3.

<tr>
<td> \ref CRP_COL_CRASH_GUID
<td> 

Example value: "0b3b0c1b-3450-4c39-9459-42221ae66460"

This property represents the globally unique identifier (GUID) assigned to the error report.
     <br><b>CrashRpt v1.1b and later</b>

<tr>
<td> \ref CRP_COL_APP_NAME

<td> 

Examples: "My Application", "myapp.exe"

Represents the name of the application name this report was generated for.

<tr>
<td> \ref CRP_COL_APP_VERSION

<td> 

Examples: "6.1.0.200", "1.3.5"

Application version this report was generated for.

<tr>
<td> \ref CRP_COL_IMAGE_NAME
<td> 
Example: "C:\Program Files\My Application\MyApp.exe"

Path to the executable file.

<tr>
<td> \ref CRP_COL_OPERATING_SYSTEM
<td> 

Examples:"Windows XP Build 2600 Service Pack 3", "Windows 7 Ultimate Build 7100"

Oprating system name, including build number and service pack. This value is taken from
end user's registry.
<br><b>CrashRpt v1.1b and later</b>

<tr>
<td> \ref CRP_COL_SYSTEM_TIME_UTC

<td> 
Example: "2009-06-28T04:47:32Z"

Time (UTC) when the crash had occured, including year, month, day, hour, min and sec.

<tr>
<td> \ref CRP_COL_EXCEPTION_TYPE
<td> 
Examples: "0 structured exception", "1 terminate call".

Code of exception handler that cought the exception followed by short description. For the 
list of possible exception types, see \ref using_crash_descriptor.

<tr>
<td> \ref CRP_COL_EXCEPTION_CODE
<td> 
Example: "0xc0000005 Access violation reading location."

Exception code; for the structured exceptions only. Hexadecimal number followed by the 
textual description.

<tr>
<td> \ref CRP_COL_INVPARAM_FUNCTION
<td> 
Example: "_stprintf_s".

Function name; for invalid parameter errors only.

<tr>
<td> \ref CRP_COL_INVPARAM_EXPRESSION
<td> 
Example: "sizeOfBuffer!=0"

Expression; for invalid parameter errors only.

<tr>
<td> \ref CRP_COL_INVPARAM_FILE
<td>
Example: "invarg.c"

Source file name; for invalid parameter errors only.

<tr>
<td> \ref CRP_COL_INVPARAM_LINE
<td> 
Example: "25"

Source line number; decimal number; for invalid parameter errors only.

<tr>
<td> \ref CRP_COL_FPE_SUBCODE
<td> 
Example: "0x81"

Subcode of floating point exception, hexadecimal number. For FPE exceptions only.
For the list of possible FPE subcodes, see the documentation of \b signal function in MSDN
or \c FPE_-prefixed constants in <float.h> header.

<tr>
<td> \ref CRP_COL_USER_EMAIL
<td> 
Example: "example@hotmail.com"

Email of the user who sent this report.

<tr>
<td> \ref CRP_COL_PROBLEM_DESCRIPTION
<td> 
Example: "I don't know"

User-provided problem description.

</table>

<b>Column IDs of the \ref CRP_TBL_XMLDESC_FILE_ITEMS table.</b>

<table>

<tr>
<td> <b>Column ID</b>
<td> <b>Description</b>

<tr>
<td> \ref CRP_COL_FILE_ITEM_NAME
<td> 
Example: "crashdump.dmp"

This property represents the name of a file contained in the erro report.

<tr>
<td> \ref CRP_COL_FILE_ITEM_DESCRIPTION
<td> 
Example: "Crash Dump"

Description of a file contained in the report.

</table>

<b>Column IDs of the \ref CRP_TBL_MDMP_MISC table.</b>

<table>

<tr>
<td> \ref CRP_COL_CPU_ARCHITECTURE
<td> 
Example: "0 x86"

Processor architecture. Decimal number followed by textual description. 
Possible values are: "0 x86", "6 Intel Itanium Processor Family (IPF)",
"9 x64 (AMD or Intel)", "10 WOW"

<tr>
<td> \ref CRP_COL_CPU_COUNT
<td> 
Example: "1"

Number of processors. Decimal number equal or greater than one.

<tr> 
<td> \ref CRP_COL_PRODUCT_TYPE
<td> 
Examples: "1 workstation", "2 domain controller", "3 server"
                            
Type of end user's system (server, domain controller or workstation). Decimal number followed by
textual description.

<tr>
<td> \ref CRP_COL_OS_VER_MAJOR
<td> 

Example: "6"

OS major version. Decimal number. Equals to "5" for Win2000/XP, "6" for Vista/Windows 7.

<tr>
<td> \ref CRP_COL_OS_VER_MINOR
<td> 
Examples: "0", "1"

OS minor version. Used in combination with major version. 

<tr>
<td> \ref CRP_COL_OS_VER_BUILD
<td> 
Example: "2600"

OS build number.

<tr>
<td> \ref CRP_COL_OS_VER_CSD
<td> 
Example: "Service Pack 3"

The latest service pack installed.

<tr>
<td> \ref CRP_COL_EXCPTRS_EXCEPTION_CODE
<td> 
Example: "0xc000005 Access violation reading location."

Code of the structured exception. Hexadecimal value followed by textual description. 
Valid for structured exceptions only. This value is taken from minidump file; it is assumed to be
the same as \ref CRP_COL_EXCEPTION_CODE property taken form XML file.

<tr>
<td> \ref CRP_COL_EXCEPTION_ADDRESS
<td> 
Example: "0x284323407"

Exception address. Hexadecimal value.

<tr>
<td> \ref CRP_COL_EXCEPTION_THREAD_ROWID
<td>  Example: "0" 

Row ID of the thread in which exception occurred. Decimal value. 
Convert this text value to \c int and use as row ID to retrieve the thread information from
\ref CRP_TBL_MDMP_THREADS table.


<tr>
<td> \ref CRP_COL_EXCEPTION_MODULE_ROWID
<td>
Example: "12"

Row ID of the module in which exception occurred. Decimal value. 
Convert this text value to \c int and use as row ID to retrieve the module information from
\ref CRP_TBL_MDMP_MODULES table.


</table>

<b>Column IDs for \ref CRP_TBL_MDMP_MODULES table.</b>

<table>

<tr>
<td> \ref CRP_COL_MODULE_NAME
<td> Module name.

<tr>
<td> \ref CRP_COL_MODULE_BASE_ADDRESS
<td> Module base load address.

<tr>
<td> \ref CRP_COL_MODULE_SIZE
<td> Module size.

</table>

<table>

<tr>
<td> \ref CRP_COL_STACK_MODULE_ROWID
<td> ""
<td> Stack trace: module name.

<tr>
<td> \ref CRP_COL_STACK_SYMBOL_NAME
<td> ""
<td> Stack trace: symbol name.

<tr>
<td> \ref CRP_COL_STACK_OFFSET_IN_SYMBOL
<td> ""
<td> Stack trace: offset in symbol, hexadecimal.

<tr>
<td> \ref CRP_COL_STACK_SOURCE_FILE
<td> ""
<td> Stack trace: source file name.

<tr>
<td> \ref CRP_COL_STACK_SOURCE_LINE
<td> ""
<td> Stack trace: source file line number.

</table>

\section retrieving_report_files Retrieving Files Contained in the Error Report

An error report is a ZIP archive containing several files. The files are: crash minidump file (.dmp),
crash report descriptor file (.xml) and optional application-defined files, such as application log file.

To enumerate files contained in report, you use \ref CRP_TBL_XMLDESC_FILE_ITEMS table.

To extract a file from the ZIP archive by its file name, you use crpExtractFile() function.

\section handling_crprobe_errors Handling Errors

Typically a CrashRptProbe API function returns zero value if succeeded and non-zero if failed. To get
text error message of the last called function, use crpGetLastErrorMsg().

\section crashrptprobe_api_reference CrashRptProbe API Reference

- \ref CrashRptProbeAPI

*/