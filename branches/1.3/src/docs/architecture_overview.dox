/*!

\page architecture_overview Architecture Overview

CrashRpt consists of two core modules: \b CrashRpt.dll and \b CrashSender.exe.
- \c CrashRpt.dll contains functionality for handling exceptions in the client software.
- \c CrashSender.exe contains functionality for sending error reports to the software's support team.

CrashRpt is separated into these modules to be able to close the application 
that crashes and to continue sending error report through \c CrashSender.exe 
in background.

Typically a process (executable file) loads CrashRpt.dll into its address space 
when process starts. This single instance of CrashRpt is shared between all DLL 
modules that are loaded into the process' address space. Client application uses 
\ref CrashRptAPI to set exception handlers in the process once, typically 
in its \b main() function. In a multi-theraded program, client additionally 
sets exception handlers in the beginning of thread procedure of each worker thread.

CrashRpt is designed to use C runtime libraries (CRT) as a Multi-threaded DLL 
(/MD compiler flag). All modules in the client application must be linked to 
the same version of CRT DLL in order to use CrashRpt. If some dependent module 
of the application uses different version of CRT or is statically linked to CRT, 
exceptions are not intercepted in that module.

In Visual C++, some exceptions related to security can't be intercepted. For example, 
since CRT v8.0 you can not handle security errors. When buffer overrun is detected, 
CRT invokes Dr. Watson directly instead of calling unhandled exception filter. This 
is done because of security reasons and Microsoft doesn't plan to change this behavior.

<b>My software is not an EXE, but DLL. Can I use crashrpt in such case?</b>

Well, you can install exception handlers in your \b DllMain() function, but typically 
you can't guarantee that the client process (EXE) won't install its own exception 
handlers above yours. And there might be some problems if the client process uses 
several worker threads that call functions from your DLL. In such case you would 
have to somehow install per-thread exception handlers too. It would be better if 
the client process take care of exception handling instead of your DLL.

<b>How do I use crashrpt across process boundaries?</b>

Each process loads its own copy of \c CrashRpt.dll. It is difficult to imagine 
how you can share single loaded instance of CrashRpt.dll between several processes. 
Currently CrashRpt doesn't support such possiblity.  

*/

