/*!

\page configure_prj Using CrashRpt in Your Project

This page is organized in the following sections:
- \ref useapi
- \ref crtdll
- \ref crtver
- \ref prgdb
- \ref savefiles
- \ref rlsfiles


\section useapi Using CrashRpt API

Do not forget to include \c CrashRpt.h header file in the beginning of your code. 

\code
// Include CrashRpt header
#include "CrashRpt.h"
\endcode

You also need to add \b CrashRpt.lib to the list of input libraries for your project.
In the Solution Explorer window, right-click your project and choose Properties item in the
context menu. Then open Configuration Properties->Linker->Input->Additional Dependencies 
and then add \b CrashRpt.lib to the list of libraries.

CrashRpt library provides several API functions, structures and classes that can be used in your 
project (see \ref CrashRptAPI, \ref CrashRptStructs, \ref CrashRptWrappers). 

\note Older versions of CrashRpt provided different set of API functions that are now 
declared obsolete. They are still supported for compatibility with older versions of CrashRpt,
but it is recommended that you use the newer functions instead. Here is the complete list of
\ref DeprecatedAPI.

All CrashRpt functions have \c cr prefix, CrashRpt structures have \c CR prefix 
and CrashRpt classes have \c Cr prefix.

All CrashRpt functions using character set dependent arguments have two versions of function name 
(multibyte versions are A-suffixed and wide character versions are W-suffixed). For example, crInstall()
function has two versions of function name: crInstallA() and crInstallW(). Typically you use a
character set independent mapping of function name in your program, for example use crInstall() that 
expands into crInstallW() if you use wide character set or into crInstallA() if you use multibyte 
character set.

To enable crash reporting support in your C++ application you use crInstall()
and crInstallToCurrentThread() functions. There are two functions because of difference in work of
exception handlers. Some of them work for entire process and others work for caller thread
only.

The function crInstall() installs exception handlers that work on per-process basis. Typically you
call the crInstall() in the beginning of your \b main() or \b WinMain() function. You can
create a crash callback function LPGETLOGFILE() and pass its pointer to crInstall(). 
The crash callback is called on crash and allows to add custom files to the error report or perform
another action.

The function crInstallToCurrentThread() installs exception handlers that work on per-thread basis. 
In a multithread program you call the crInstallToCurrentThread() for all 
threads except the main one. Typically you call this function in the beginning of the thread
procedure.

On application exit, you should use the crUninstall() function to unset exception handlers. 

If you have several worker threads, just before the return of a thread procedure call the
crUninstallFromCurrentThread() function to unset exception handlers from the caller thread. No need to call the
crUninstallFromCurrentThread() function in the main executrion thread, because crUninstall() will do that for
you automatically.

You can use \ref CrashRptWrappers to simplify installation and uninstallation of exception
handlers in your program.

Example:

\code

#include "CrashRpt.h"
#include <assert.h> // Using assert()
#include <atlstr.h> // Using ATL::CString

// .. Define the crash callback

BOOL WINAPI CrashCallback(LPVOID lpvState)
{
  // Here GetAppDir() should be your function that returns path to
  // the application directory
  
  CString sLogFile = GetAppDir() + _T("\\dummy.log");
  CString sIniFile = GetAppDir() + _T("\\dummy.ini");

  // Add two files to the error report

  crAddFile(sLogFile, _T("Dummy Log File"));  
  crAddFile(sIniFile, _T("Dummy INI File"));
 
  return TRUE;
}

void main()
{
  // Install CrashRpt support
 
  CR_INSTALL_INFO info;
  memset(&info, 0, sizeof(CR_INSTALL_INFO));
  info.cb = sizeof(CR_INSTALL_INFO);  
  info.pszAppName = _T("My Application");
  info.pszAppVersion = _T("1.3.5");
  info.pszEmailSubject = _T("Error Report from My Application 1.3.5");
  info.pszEmailTo = _T("myapp_support@hotmail.com");  
  info.pszUrl = _T("http://myapp.com/tools/crashrpt.php");
  info.pfnCrashCallback = CrashCallback; 
  info.uPriorities[CR_HTTP] = 3;  // try HTTP first
  info.uPriorities[CR_SMTP] = 2;  // try SMTP second
  info.uPriorities[CR_SMAPI] = 1; // try Simple MAPI last  

  
  int nInstResult = crInstall(&info);
  if(nInstResult!=0)
  {
    // Something goes wrong!
    TCHAR szErrorMsg[512];
    szErrorMsg[0]=0;

    crGetLastErrorMsg(szErrorMsg);
    _tprintf(_T("%s\n"), szErrorMsg);

    assert(nInstResult==0);
  }


  //
  // .. your code follows here ..
  //


  // Unset crash handlers
  int nUninstResult = crUninstall();
  assert(nUninstResult==0);

  return;
}

\endcode

Typically an application creates and maintains a log file where operations and errors are
written. Such log file can be helpful for crash analysis and should be added to an error
report. You add application-specific files to the error report using crAddFile() function.

Sometimes it is required to remotely debug some application logics error. Such an error,
for example, infinite loop, may not cause program crash. To collect the information about
error that doesn't cause crash, a software developer might provide an ability to generate 
error report manually on user demand,
for example on a key combination press. The crGenerateErrorReport() function allows to generate an error
report manually.

Visual C++ provides structured exception handling mechanism. You may use __try{}__except(Expression){}
construction to catch a structured exception in a block of code in your program. Use crExceptionFilter() function to
generate an error report when structured exception occurs.

When you install crash reporting support to your program, it is important to test if CrashRpt
intercepts exceptions properly. Use crEmulateCrash() function to emulate an exceptional situation.

Typically a CrashRpt API function returns zero value if succeeded and non-zero if failed. To get
text error message of the last called function, use crGetLastErrorMsg().

CrashRpt API Reference:
- \ref CrashRptAPI
- \ref CrashRptStructs
- \ref DeprecatedAPI
- \ref CrashRptWrappers


\section crtdll Use CRT as Multi-Threaded DLL (/MD) in Release Configuration

It is important that you configure your project to use C++ runtime libraries (CRT)
as Multi-threaded DLL (/MD) for Release configuration. This is the way recommended in MSDN.
And CrashRpt won't work properly if CRT is used in different way. See the \ref crt_version_and_dll
for more information.

In the Solution Explorer window, right-click your project and open project Properties. 
Then choose Configuration Properties->C/C++->Code Generation. In the <b>Runtime Library</b> field,
choose <b>Multi-threaded DLL (/MD)</b>.

This should be done for all projects in your solution to share single CRT DLL.

\note In Debug configuration it is not important what CRT linkage you use. Typically  
your default debugger intercepts exceptions instead of CrashRpt in Debug configuration.

\image html crtdll.png "Multi-threaded DLL (/MD)"    


\section crtver Use the Same Version of CRT for All Application Modules

Ensure that all modules that exist in your application use the same version of CRT. 
If some dependent modules were compiled using an older version of CRT, you should recompile them 
to ensure the single version or CRT DLL is used. 

For example, assume you use Visual Studio 2005 and CRT 8.0 linked as DLL, but some dependent module in your 
application was compiled in Visual Studio .NET 2003 and uses CRT 7.1 linked as DLL. 
In such situation a C++ exception in the dependent module won't be intercepted by CrashRpt, because CrashRpt will 
intercept exceptions in CRT 8.0 only. 


\section prgdb Enable Program Database (/Zi, /DEBUG) in Release Configuration

To get the most out of the crash minidump, the debugger needs your application's debug 
symbols. By default Release builds don't generate debug symbols. 

-# In the Solution Explorer window, right-click your project and open project Properties. 
Then choose Configuration Properties->C/C++->General. In the <b>Debug Information Format</b> field,
choose <b>Program Database (/Zi)</b>.
-# Choose Configuration Properties->Linker->Debugging. In the <b>Generate Debug Info</b> field,
choose <b>Yes (/DEBUG)</b>. In the <b>Generate Program Database File</b> field,
enter the name for your PDB file, for example <b>\$(TargetDir)\$(TargetName).pdb</b>.

Steps 1 and 2 should be done for all projects in your solution that support program database 
(EXE, DLL).

\image html program_database.png "Program Database (/Zi)"

\image html linker_debug_settings.png "Enabling Debugging Information in Linker"

\section savefiles What Files Should be Saved Locally Before Software Release

When you are ready for a software release, the following steps must be
performed to be able to properly read end user error reports later.
  
- Create a directory, for example name it 'CrashRptSaved'.
- In that directory create a subdirectory for your software release,
  for example 'MyApp v.1.3.5'.
- Copy all binary files (*.EXE, *.DLL) from your project output. 
- Copy all program database files (*.PDB) from your project output. 

It is recommended to direct all project output to \c bin directory and 
then just copy entire \c bin directory. These steps should be performed for 
exactly the same software build that you plan to release. If you rebuild the project 
after files are copied, you must copy the files again.

It is good idea to automate these steps as a post-build event. That would guarantee you won't
forget to copy the files.

When a crash report comes in, you use the release build and debug symbols you copied, 
along with the minidump included in the crash report, to debug the crash.

Before release is made, it is recommended that you check if exceptions are properly 
intercepted (use the crEmulateCrash() function),
that error reports are properly received by your support team and that you can properly read
received error reports.

\note The files copied to CrashRptSaved directory should be stored locally during the software 
life time. The saved files should NOT be included in the software release package and should NOT be sent to 
end users. You should never ship debug builds or debug symbols (PDB files) as they will 
not only take up more 
space on your CD/download/client's machine, but they will also make reverse engineering 
your code a trivial exercise. 

\section rlsfiles What Files Should be Distributed with Your Software Release Package

You must always distribute the following files with your software release.

- \b bin\CrashRpt.dll (113 KB in size)
- \b bin\CrashSender.exe (220 KB in size)
- \b dbghelp\bin\dbghelp.dll (1056 KB in size)
- \b zlib\bin\zlib1.dll (59 KB in size)

It is recommended that you place these files to the directory where your application executable
file is located.

The \b CrashRpt.dll and \b CrashSender.exe are core CrashRpt modules. \b dbghelp.dll (Microsoft Debug Help Library) 
and \b zlib1.dll (ZLib) are dependent modules.

*/