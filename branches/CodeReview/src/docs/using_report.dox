/*!

\page using_error_report Using Error Reports

This page is organized in the following sections:

- \ref about
- \ref zip_structure
- \ref crashlog
- \ref minidump
- \ref windbg

\section about About Analysing Error Reports

When a software release is made and CrashRpt support is enabled in your software, sooner or later you
start receiving crash reports. 

Count of received crash reports may depend on robustness of your software to various 
exceptional situations and on how much your software popular. So it's nothing unusual
if you receive hundreeds of error reports a day. If there are many incoming error reports,
you can monitor and analyse them for the first few days after release, and prepare a hot fix 
release. 

The purpose of an error report is to help you determine the reason of the problem and 
try to fix it. The keyword is 'try', because in most cases you can't fix crash reports as 
you usually do with normal bugs. You usually can't reproduce the error on your machine,
so you can't guarantee it is fixed. So the only way to check is to make fixes in parts of code 
that could cause the crash most probably and to release a new version of software. 

The normal scenario is that your software becomes more and more stable with each release and
less and less error reports are received. 

\section zip_structure The Structure of an Error Report

A crash report is a small ZIP file (usually less than 100 KB in size) containing several files, such as 
 - crash minidump (crashdump.dmp), 
 - crash descriptor XML (crashrpt.xml) 
 - and optionally application specific files, for example, application log files.


\section crashlog Using Crash Descriptor XML (crashrpt.xml)

The crash descriptor is an XML file that contains the basic information about the crash.

\note The structure of XML file has changed since the version 1.0 of CrashRpt. The old structure
provided mostly unusable information taken from crash minidump (exception address, 
module list and so on). 



A typical crash descriptor is presented below.

\code

<CrashRpt version="1100">
    <CrashGUID>5822d7e1-61ba-4fb0-bedf-672369fa9d36</CrashGUID>
    <AppName>CrashRpt Tests</AppName>
    <AppVersion>1.0.0</AppVersion>
    <ImageName>d:\Projects\CrashRpt\src\bin\CrashRptTest.exe</ImageName>
    <OperatingSystem>Windows 7 Ultimate</OperatingSystem>
    <SystemTimeUTC>2009-06-28T04:47:32Z</SystemTimeUTC>
    <ExceptionType>11</ExceptionType>
    <FileList>
        <FileItem name="crashdump.dmp" description="Crash Dump" />
        <FileItem name="crashrpt.xml" description="Crash Log" />
        <FileItem name="dummy.ini" description="Dummy INI File" />
        <FileItem name="dummy.log" description="Dummy Log File" />
    </FileList>
    <UserEmail></UserEmail>
    <ProblemDescription></ProblemDescription>
</CrashRpt>

\endcode

The root element is <CrashRpt>. It has attribute named 'version' which represents
the version of CrashRpt library that generated the error report. The value of '1100'
means version 1.1.0.

The element  <CrashGUID> is a unique ID of the error report. It can be used, for example,
as a primary key if you plan to store crash reports in a database.

The element  <AppName> is the name of your application that was passed to \b crInstall() 
as \b pszAppName member of \b CR_INSTALL_INFO structure.

The element  <AppVersion> is the version of your application that was passed to \b crInstall() 
as \b pszAppVersion member of \b CR_INSTALL_INFO structure. You are typically interested
in analysing error reports from the latest version of your software and ignore reports from 
older versions.

The element  <ImageName> is path to the executable image of your software.

<OperatingSystem> is the friendly name of end user's operating system, including name, build number
and service pack. It is useful information because many errors are OS-specific.

<SystemTimeUTC> is the time in UTC format when crash had occured. This value can be used to
order crash reports by creation time.

<UserEmail> is the E-mail address of error report sender. If specified, it can be used
to contact user and request additional info about error.

<ProblemDescription> is the user-provided problem description. 

<FileList> contains the list of files that are contained in the error report. 

<ExceptionType> is an integer that means the type of error:

- 0 Win32 structured exception.
- 1 C++ terminate() call.
- 2 C++ unexpected() call.
- 3 C++ pure virtual function call.
- 4 C++ new operator fault.
- 5 Buffer overrun error.
- 6 Invalid parameter exception.
- 7 C++ SIGABRT signal (abort).
- 8 C++ SIGFPE signal (flotating point exception).
- 9 C++ SIGILL signal (illegal instruction).
- 10 C++ SIGINT signal.
- 11 C++ SIGSEGV signal (invalid storage access)
- 12 C++ SIGTERM signal (termination request).

The exception type can be used to divide error reports into some categories.

There are additional elements that appear sometimes, depending on ExceptionType.

\b <ExceptionCode> is the structured exception code. It presents when ExceptionType is 0.

\b <FPESubcode> is the floating point exception subcode. It presents when ExceptionType is 8.

<InvParamFunction>, <InvParamExpression>, <InvParamFile> and <InvParamLine> are present when 
ExceptionType is 6. These elements are typically empty. They may be non-empty if debug version
of CRT is used in your application.

\section minidump Using Crash Minidump (crashdump.dmp)

The crash dump file is a collection of memory ranges, CPU register states, the call stack and 
local variables for each excecution thread, the list of loaded and unloaded modules
and system information. The minidump is created with the help of the DbgHelp DLL's 
\b MiniDumpWriteDump() function. The minidump contains 
various information about the state of the application when the error occurred. 

The crash minidump is unusable without the debugging symbols database (program database, PDB).
Application modules may be loaded at memory addresses different from time to time. This is common
for Windows Vista and its Address Space Layout Randomization (/DYNAMICBASE:YES compiler flag).  
You can not uniquely identify the exception by its address. And you can't determine the exception module
without debugging symbols.

To open crash minidump, copy it to the directory where the binaries (EXE, DLLs) and program
database files (PDB) are locally stored. You copy the minidump to that folder to ensure the debugger find 
the program database files and binaries. Then double-click on the minidump file name. This should
open it using an associated program (for example, Visual Studio). When minidump file is loaded
in Visual Studio, press F5 to run it. If debug symbols are loaded successfuly, you are now able to see
the place in your source code where exception had occurred.

The most interesting for you is the call stack. Open the Call Stack window to see the stack trace.
Each line of stack trace contains the name of module where crash occured, the name of symbol (function or class),
offset from beginning of symbol code, source file and line number. This should be enough to
locate the error, assume the most probable reason and try to fix.

One of the most probable reasons of program crash is using a pointer to a variable without
checking if it is not equal to NULL. So, in most cases such check would make code more robust.

Sometimes you can't determine the location of the crash and the error message is displayed
'No symbols loaded for any stack frame'. This may be because of the following reasons.

- Debugger may not locate the correct PDB and binary files. Try to open Tools->Options->Debugging->Symbols
  and enter the path to the directory where your PDB files are located. Then reopen the minidump.

- You have wrong or missing PDB files. Open the Modules window and check the symbol status
  for modules of your program. If the status is 'Module not loaded' than you have missing PDB. 
  Or maybe correct PDB files weren't saved locally before software release.
  In such case you won't be able to properly read any of received crash reports.

- If symbols for some modules of your program are loaded, and you have the error, than
  there were no debugging symbols generated for the module where crash had occured. Check that
  you set Program Database (/Zd) compiler flag for all modules of your application.                    

\section windbg Using WinDbg to Open Minidump Files

You can use the WinDbg program from <b>Microsoft Debugging Tools for Windows</b> framework for opening 
crash minidumps. It is freely distributed. Hovewer, if you have Visual Studio installed,
why not to use Visual Studio?

Let's show hot to use WinDbg using an example. Run the sample CrashRptTest aplication that presents in
CrashRpt package, and then click on any button to generate an exception. Then extract the crashdump.dmp file 
from the crash report, launch WinDbg, and open the crash dump by pressing CTRL+D.

Next, you need to set the symbol path for WinDbg with the .sympath command. Switch 
to the command window (ALT+1) and enter .sympath followed by a space followed by the 
semi-colon delimited list of directories to search.

.sympath D:\\CrashRptSaved\\CrashRptTest_v1.1.0

Similarly you need to set the executable and source search paths with the .exepath 
and .srcpath commands.

.exepath D:\\CrashRptSaved\\CrashRptTest_v1.1.0
.srcpath D:\\Projects\\CrashRpt\\CrashRptTest\src

The final step is to change the debugger context to the context record associated 
with the exception by entering the .ecxr command.

.ecxr

If everything is configured correctly, you should now be able to walk the call stack, 
see local variables, and loaded modules. You can even have WinDbg highlight the offending 
line of code by double clicking the CrashRptTest frame in the Call Stack window (ALT+6). 
Note: The exact line number may be a little off due to linker optimizations.

*/